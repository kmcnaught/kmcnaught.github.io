micro:bit LIVE 2021 | A beginner-friendly editor for the micro:bit
https://www.youtube.com/watch?v="fe487P5QASE
yes hello everybody and welcome um so yeah my name is lorne and i'm a third year undergraduate student studying computer science at oxford university um and the project that i'm presenting today was a group practical project that i participated in last academic year um and so that was spring of 2021 and you might have like noticed if you happen to be watching the keynote earlier that was from johnny he actually mentioned that there was a team at oxford university that like a team of students at oxford university that created an editor for the micro bit um and yeah i was from that team of students at oxford university um the the brief of the project given to us from the micro bit foundation was to create a prototype editor to be used in conjunction with the micro bit um and that was before the micro bit foundation started to make their new like uh editor which is currently in the alpha version um so it's kind of almost to give like to try things out and see what works there are a few different teams that did this um but the editor is supposed to be largely for young teenagers or children around that sort of age who might not yet have had a lot of text-based coding experience um they may or may not have had block-based coding experience but we needed a very very beginner-friendly editor for them um and some people might be asking why python you know um why do we want to text both text-based python editor rather than just allowing them to continue using block-based code um and i'd say the answer to that is that if some of these young students want to eventually get a job as a programmer or apply to computer science at university or get an apprenticeship then they'll eventually need to use text-based programming languages at some point and python is kind of easy as far as text-based programming languages go so it is a logical first one to go for that being said i remember my experience learning to program in scratch which is a block based language a little bit like make code that's also used with a micro bit um and i remember when i was about sort of 10 i found it very difficult to start using text-based programming languages um so i started using scratch when i was 10 and it genuinely took until i was probably about 16 before i felt ready to use python because the jump is so massive um you know with python you can get syntax errors and exceptions and it's all a bit overwhelming unless you have a lot of guidance um so our editor hopes to like slightly small and let's decrease the size of that gap a little bit um so what i think i'm going to do is i'll just jump straight into demonstrating the project to you and explaining things as we go along i'll walk you through pretty much all of the features some may be more interesting than others but please do stay till the end because there will be a fun little duck i think johnny showed a screenshot of the duck in his presentation earlier um so the first thing that anyone needs to do when they open our editor is to press start so i'll just press that now and what that does is it connects to the physical micro bit which should already be plugged in by usb um i've got mine here and uh the micro bit like if the micro bit isn't connected by usb when you press start then it will show a pop-up message to tell you that um now this box on the right is where the student can type their code into it to run and it starts off with example program i think this example program is actually the same example program as is in the like the more standard micro python editor um but it's just to give the student an idea of what python syntax looks like before they start and there's also quite a useful autocomplete function in this so if i type if i type b for example then display pops up straight away if i either press tab or click on it then it will insert it into the editor if i then press dot it shows me all the different things i can do with display which might be quite useful for a student that wants to explore some of the micro bit features that they haven't necessarily been explicitly taught they can just try things out and it shows them what options are available um so i'll just get rid of that uh by the way don't underestimate the importance of autocomplete in an editor for children teenagers because at least when i was a child i wasn't necessarily very good at typing and i think it is quite common for children not to know how to type so having a very good uh autocomplete function helps to alleviate the worry of typing struggles um preventing them from getting in the way of programming so pretty much the first thing that a student is going to want to do once they have a program will be to run their code right so i will just press run and hopefully you can see that it's running the code if i just hold up my micro bit here you can see that it's scrolling hello world then it will show a heart and it will keep doing that in a loop um of course because it is while true that means that it will never stop until i explicitly press this interrupt button here before i do press interrupt one thing to notice at this point is that all of the buttons except for interrupt and help are grayed out um and that's to prevent students thinking that they should be pressing those buttons at this time because if you think about it it's not really clear what pressing run should do if it's already running you know should it just allow it to continue running as it was before should it restart it so it's easy just to not let the student press that button um another thing that you can't press slash do while the code is still running is you can't actually edit things while the code is running so if i highlight this here and try to backspace then it will say cannot edit in read-only editor and the reason for that is because um it's kind of a complicated idea for students to get their head around the fact that making changes doesn't actually affect the control flow of the program in real time you know if you make changes then you have to wait until next time you run it before the changes actually take effect um so to prevent students from just getting confused about that it's easier just to sorry i do have a bit of a cold right now it's easier to just not let the students edit the code while while the code is running so i will just stop it here by pressing interrupt sorry i do have a column we can have some water now before we get on to any more interesting features and trust me i do think there are some quite cool features i will just explain the difference between flash and run because that is one area where students might get just a little bit confused so it's good to make it super clear in the beginning so you'll have probably noticed from my brief demonstration that pressing run causes the code to execute correctly but what wasn't necessarily quite as obvious from the demonstration is that it sends the code line by line to the micro bit executing the code in real time without saving anything to the permanent memory of the micro bit and i think that's quite useful for debugging purposes because whatever program was stored on the micro bit before you pressed run is the same program that's there after so pressing run doesn't affect the memory of the micro bit at all um in a similar way to run pressing flash also runs the code but the difference is that when i press flash it also saves the code onto the micro bit in a way that makes the code stay there so if i then unplug the micro bit from the computer and plug it into a different computer or even just into a power pack the new code will now be there and it will be able to run so that's just the difference between run and flash so one of the key features of our editor is the tutorials on the left now these tutorials are designed to go side by side with the editor so the student can be reading the tutorial on the left while editing their code on the right this is kind of similar to the tutorials in the new alpha editor that johnny showed in the keynote speech earlier um we didn't have access to that editor when we made this one though um so one of the best features of these tutorials is the fact that they are super interactive so there are code snippets embedded throughout and whenever i press run example it will run on the physical micro bit over web serial so if i press run here then the word value will be printed out there onto the screen um now it looks like it's happening on the computer because i pressed a button on a screen and the thing appeared on the screen but it is actually running on the physical micro bit so what's happening is through web serial the computer sends the instructions to the micro bit and then the micro bit runs the program finds that the word value needs to be printed and sends a message back to the computer over web serial telling it to print the word value so it is still all happening on the micro bit um now another interesting feature of these tutorials is the fact that you can insert fragments anywhere within your code so if i get rid of this while loop i can press insert fragment here and now this appears in the student's code um and i think that's quite useful if the student maybe wants to take parts of the tutorial to embed in their own code and change things um because the tutorials and by no means a strict instructions of exactly what you have to do students are encouraged to be creative so they can for instance change a little bit maybe they want to change the variable into their own name and then print their own name so you know here i can replace the variable with lawn and then print lon you might be wondering why i don't have the variable the string directly inside these parentheses and it's because this particular part of the tutorial was about how variables work so that's why we're assigning to a variable here when we don't necessarily need to but if i now press run then it prints my name at the bottom of the screen so that's what this white box is here for it's for printing out the um it's basically for any output that should be printed will appear in this white box whereas on the tutorials will appear directly below just so that you can see it where you press the button now my favorite of these tutorials is the python errors tutorial so i will just select that now um and the reason i think that this tutorial is so useful is because teaching debugging techniques to children is very difficult because the best way to learn something is to practice it but if you know as they say use it or lose it but if the students aren't necessarily getting certain types of errors all that often then they won't be able to practice debugging at the point that they learned it um you know for instance if the teacher teaches them what a value error is one week and then it's three weeks later when the student naturally to their own value error they might have already forgotten um what the error is by the time they actually gapped onto needing to debug it um so that's why this error tutorial is so useful also you know students often get a little bit scared when they see an error message i've done some tutoring before and the students will say oh no it's broken fix it for me without necessarily even reading the error message or not necessarily reading the whole error message so hopefully this particular tutorial will teach them to see the error message as a helpful tool that identifies the problem rather than a scary monster or something and not only does this tutorial give examples of different types of errors like you can see it mentions syntax errors and name errors index errors zero division errors etc but it also actually contains some challenges for students to put their new knowledge into practice and those are embedded throughout so for instance we've got a task here directly after having introduced syntax errors it has task where the following code has one or more syntax errors and the student can then insert this code into the editor practice debugging at the point that they've learned it so that that knowledge will really um get a chance to be put into practice and we have quite a few of these tasks including at the very end we then have a super task where it shows a like a block of code with multiple errors all the different types of errors that they've just learned about in the tutorial and they can put all their knowledge together into practice uh to try to fix these errors um and all of the other tutorials are similar in the sense that they have tasks embedded within and hopefully this will give them brilliant practice with debugging um and speaking of debugging actually this editor contains the debugging duck um so if i press the help button right here uh the little duck immediately appears ready to help the student through any problems they might have uh intuitively the doc already knows whether there's an error message displayed because it can communicate with micro bit and it will even know which uh error message is displayed you know whether it's a syntax error a value error which line it's on however the duck does hide some of its knowledge initially because it's designed to be a teaching tool a learning tool and if it just told the students the answers immediately that might um ruin some of the experience of having teaching the student how to fix their problems themselves that being said um if the student does answer one of the questions wrong the doc will tell them so for instance there's currently no error message displayed but if i click that an error message is displayed then it will say actually i can't see your error message so it does feel correct the student i will just try this again this time answering maybe more correctly maybe my code doesn't do what i want it to do and if i go down this line of questions it will the doc will suggest possible mistakes that are quite common mistakes students might have made so for instance if i press that my program does nothing at all it might suggest that i forgot to use parentheses when doing a function call in which case i'm just referencing the name of the function rather than actually calling it um or maybe if that's not what i've done it suggests that maybe i've just assigned to a variable rather than actually printing the variable if the dot does give up altogether it will just direct them back to the python errors tutorial with the hopes that maybe a bit more practice with the challenges on there might help the student a little bit um so this time i will try to actually create an error to show you what happens there so as an example i could intentionally create an import error if i replace this lowercase m here with a capital m then you know python is case sensitive it knows what lowercase micro bit is but it doesn't know what capital m micro bit is so if i press run it now hopefully will give me yep there we go we've got an import error it tells me the line it actually highlights the line as well in the editor to make it really really clear to the student exactly which line has caused them the problem and it displays the error message on the screen here and i think that's much better than some other editors where the error appears only on the led display of the micro bit because um in those editors it sometimes takes a long time to scroll the whole error message because you can only display one character at a time on the micro bit so that might confuse a student or maybe they might not watch the led display for long enough to actually read the whole error message they might get get bored of watching it and walk away so i think it's a lot better to have it on the screen and visible um so now when i press the error message is displayed and then it's something else and it's an import error then the doc will explain exactly what import error is you know reinforcing the information in the tutorial about error messages but also uh you know giving the information to the student at the time that the student needs it i think is quite an important idea now if i walk through uh sorry actually if i say that i still need help then this time because the error message displayed and it knows the line of the error message is displayed then instead of just directing the student to the er the tutorial on errors it will actually be able to figure out whether the student is following a tutorial so in this case it notices the student is following a tutorial and it asks if they want to compare the error in the code to the example solution now if i recall correctly actually i think i might have been on the tutorial about errors when i pressed this dot um and this is the one exception to this because if the student has selected the tutorial on errors then um it won't be able to compare the to the example solution because all the code examples in the tutorial on errors intentionally had errors because they were intended for the student to fix so actually it mentions that actually i can see you're following the tutorial on errors and i can't simply tell you the correct answer because that kind of would be cheating if the dot could just fix all the errors when the challenges are meant to be to fix the errors so i will just quickly switch the tutorial to the one on python language features and do the same thing again error message display it you know it reminds me which line that error is on i'll go through the exact same line of reasoning again and this time when i press yes that i want to compare to the tutorial it finds the closest matching line in the tutorial so in this case it notices and it highlights the difference between the line that i've written and the line that was in the tutorial um i think one thing that's potentially important to notice is that this actually um this does it based on which line matches the close in terms of text rather than in terms of line number so hypothetically if i had inserted a bunch of stuff above the line with the error then it would you know still go further back down to the line with the error um because it it's not based on position and that i think is particularly useful because you know this whole thing about tutorials they are still designed to allow creativity so the student is very very likely to add extra things into their code that wasn't in the tutorial and that doesn't break the feature of comparing this to the closest line in the tutorial um so just to summarize the point of the duck really it's largely to reduce the burden on the teacher because the students won't have to ask as many questions to the teacher because they can get many answers from the duck instead and it's also to build some independence when it comes to debugging because if the student has used the duck enough times then they'll be able to remember some of the questions that it asks and then they can ask those questions themselves rather than relying on the duck every time which might be really useful if they eventually transition to a different python editor like idle which doesn't have a duck at this point some of you maybe might be a little bit confused um you might be asking yourselves you know why is it a duck why not any other animal um is there even a reason and the answer is yes there is a reason and it's because of a concept in computer science known as rubber duck debugging which essentially means that it's easiest to debug your code when you get the chance to fully explain to someone in detail exactly what's gone wrong so you know programmers in the workplace might describe it to their co-worker and students with this editor instead can describe it to the duck so that just about wraps up my demonstration of the editor itself but i am now going to say some words on how you can use the editor yourself if you would like to um so keep in mind that this is still a prototype editor so there aren't that many tutorials in the tutorial list and there definitely are some features that could be added for instance you know a micro bit simulator um or the ability to save their code um however if someone would like to try it out then it is available online um it's still up and running and you can access it uh i've got the link at the top here so microbit hyphen team hyphen 12 dot github dot io forward slash editor forward slash and the source code can be accessed through github and i've got that here at github.com microbit hyphen team hyphen 12 forward slash editor i will be posting both of these links on linkedin after that um i think my linkedin is available on my hop-in profile so do feel free to check out that post if you didn't quite catch the links now um one thing that is super important to remember though if you're using our editor is that you first have to have micro python on your micro bit before it will work um so you can flash micro python onto the micro bit basically by using any of the other python editors for the micro bit uh you know do that once and then you can use that editor as many times as you want after that also it only works on web browsers that have web serial enabled so recent versions of cry of chrome or microsoft edge will work but i don't think it works on firefox yet because i don't think firefox has web serial um you can always search up whether your browser supports web serial if you're using a different browser for the ones i've just mentioned um and since i've got a bit of time here maybe it's worth me showing you how to add to the tutorials if you want to because this is all open source and anyone theoretically can contribute if they would like to um also it might just be nice to see how exactly we made the tutorials so if you go into the public folder and then tutorials um then you can click on any of the existing tutorials to have a look at them so if i go into pythonchute.md this is the one about python language features it is in a language called markdown which is very very similar to plain english if i just go into the bit that shows me the original source of the markdown yeah you can see it's very very similar to plain english just except that varying numbers of hashtags um specify different types of headings and you can do code blocks by doing three backticks if anyone's not familiar with markdown um it is very easy to learn there are cheat sheets available online if anyone if anyone wants to learn mark down and the thing that perhaps is a bit more unique to our editor rather than just normal markdown is the way in which you need to format the code snippets so using this example here um this example here when it says from micro bit import star um you know that is very important in order to run pretty much any code on the micro bit because you know display etc is from the micro bit library however you know that we um so if you if you remember on the editor there was always that button um on all of the tutorials there was the button that says run example so we need the from micro bit import start in all in order to run the examples however we don't want the from micro bit import star to be inserted every single time we press insert fragment because you can imagine a student might actually insert lots of fragments and there's no reason to have the from micro bit import star several times throughout the students code therefore the way to solve this is we actually have written kind of a special type of markdown uh reader for the code snippets that checks which lines you specified up here that should be the ones that get inserted into the editor so here i've specified using a hashtag that's just for a python comment um that it's lines four to eight that get inserted into the editor so all of the lines get run when you press run code snippet but only lines four to eight get inserted into the editor when you press that so that's the only part of the markdown that's unique to our editor and the any the other things that you need to do if you want to edit our tutorials slash add your own tutorials is any images in the tutorial you have to add into this image folder here um for instance if you were doing a tutorial that linked to the led display of the micro bit it might be useful to have some screenshots of that maybe in the tutorial so you would just have to put those into images um and the final thing you need to do is add the name of your tutorial into the menu um you know so that it will appear in the tutorial selection pane so that is if you go back to i think it was an editor and then src uh resources and then there's just tutorial list dot ts so down here in the list you would just do uh within the curly braces you'd have path and then the name of the file that contains your tutorial so that's the name of the markdown file you've created and then title and then whatever you want the title to be displayed to the student um and that would be the title that it appears as in the menu so um i think that kind of concludes my talk does anybody have any questions just a lot of positive comments lauren in the editor there or sorry in the chat um dr michael mentioning how well it runs on edge on a mac so very smooth well done and uh just um yeah thanks and and positive comments about the whole editor experience i think it's incredibly cool that johnny did such an incredible job setting up this conversation and then you're tying it all together so he kicked off and you're wrapping up with them the success of this editor so congratulations to you and your team i don't see any other questions here but people are more than welcome to post maybe they're all poking around on the site and if you want to put in your linkedin profile you had mentioned about connecting that would be great people could just pop it in and and take the time now to connect with you um that's another great way to to stay connected yes sorry i'm trying to figure out how to find my linkedin profile to to put it into the chat no problem and i hope that you're uh you'll have some rest over the holidays soon and that your cold doesn't get the best out of you i'm sure it's a mixture of uh cold season and and doing a lot um like presenting on a global live stage so hopefully you have a restful day tomorrow but it was a wonderful presentation have you done this presentation um before uh i haven't done this presentation specifically before but when we were doing um when we were doing the project we had weekly meetings with johnny from the micro bit foundation um and i think for part of that he was on paternity leave so there was also matt from the microbit foundation that we presented to we did kind of presentations every week and then at the very end of the project we did a presentation to some of our course mates that had been doing other projects like um all the teams did presentations to each other awesome great it sounds like you're in a great program and you have a great group of teammates working with you as well so nice to hear that um so happy computer science education week this has been a fantastic day to to kick off that uh and i hope that everybody has an opportunity to play with this and um access the github link there to dive into some of the resources that lauren shared and you'll see her linkedin profile there so with that i want to say thank you to lauren for taking the time third year university i can't imagine uh thinking about presenting globally so good for you and keep it up because people need to see uh this program and how well thought out it is and the fact that you're thinking through not just the user perspective but you know as a an educator bringing into a classroom how it could be supported so really thinking through the whole design process um very nicely done and so with that everybody you'll notice that the event chat will still be live and we're going to be live on the stage at um quarter two so for at me that's 2 30 2 45 and for you i believe it's 7 45 lauren yeah so we have about 10 minutes now so one last opportunity to check out the networking section check out the expo or poke into another session and check out their chat and grab some of their resources but otherwise we're going to close this out and we'll meet you on the closing keynote stage thank you everybody for attending and thanks to lauren big round of applause for your session and we look forward to seeing you on linkedin and on social at hashtag microvet live thanks everybody