micro:bit LIVE 2021 | Between Blocks and Text: Strype - a novel editor for Python
https://www.youtube.com/watch?v="zCGDAjrCQXc
hi thank you so much uh just to let you know i might be looking a bit on the right because i have two screens and part of it on my other screen so i thank you very much for the introduction my name is babis and this is my colleague pierre and we are from king's college london from the blue jay team and we've created a tool for a frame based python for the micro bit called stripe so i'll start with a [Music] it's it's a free online programming uh tool and it's not yet another programming tool for the microbit because it takes a novel approach to programming called frame based editing so the main two programming paddings for programming education are block-based and text-based programming block-based programming is usually considered as the most appropriate style for introducing programming to learners it builds on the idea of direct manipulation like you know drag and drop and uses recognition over a call in order to help users interact with the language in a more prompt way let's say moreover it reduces much of the burden uh that syntax introduces and does allow the user to focus mostly on the concept of programming rather than the syntax itself and nonetheless block-based programming is not perfect as everything in this world and it's limited to the basic programming concepts more or less and features and it's not very productive for more advanced users as complex programs consume much of this screen space and cannot be edited quickly so on the other hand we have text-based editing which is focused more of the advanced user who is aware you know the language features and syntax it's what mostly support keyboard only interaction which again for advanced users may be more productive but for novices you know it's not great so then a main question remains which is how do we transition easily from one style to the other and so different techniques have been proposed for this transition such as you know tools with side-by-side editors where they show block-based and text-based editing at the same time or other systems that translate code from one to the other and vice versa so in an effort to combine uh the good aspects of both blog-based and text-based programming we created a new programming paradigm that it's called frame based editing so it supports at the same time uh direct manipulation and basic syntax error avoidance as as blocks do but also a keyboard all interaction and uses a recognition rather than recall so frame based editing is thus a stepping stone between blocks and text programming which could potentially help in transition from one to another uh due to its keyboard-only interaction and the more compact and structured visual presentation and could be even used in the longer term uh from advanced users so before i show you uh how stripe looks like i would like to let you know that you can find it on stripe dot org and it's completely free to use so let me load the page now and if you'll excuse me oh there we are yep so that's our landing page and i'll do now i don't know can you see my screen or is it stuck it doesn't appear to it yeah it currently looks uh stuck let me probably try to turn off internal again allow sharing screen one yep now you can see it probably yep so that's our landing page uh by clicking start coding uh you're going to get into this and [Music] this environment maybe i should also try to increase the font a bit yep i think it's a bit clearer now uh so this is the the user interface of stripe as you can see it is played into two more or less main sections the one on the left the uh the dark green green let's say and the one on the right the light green in the left of the screen we have the coding area where all the frames can be placed on the right we have the list of frames uh available to the users and we'll come back to them later so before i continue i think it's a it's a bit important to explain what a frame is so a frame is a distinct visual element which describes a specific programming construct such as a for loop for the while loop as you can see here an if statement or function call it can be manipulated directly i drag and drop so as you can see here with the while and may enclose other frames within it and and that's for everything that has a body like the loop so while as i said is uh is is a frame and can be dragged and dropped and contains other things within it so through the context menu you can cut copy duplicate disable even delete frames uh in order to allow us though for a keyboard on introduction we have designed and the this blue cursor line which we call it carrot and the carrot is an indicator of where you are currently editing and contextualizes the frames and that can be added at its place it can be moved by most of both the mouse like by clicking and the keyboard through the up and down arrows so coming back to the list of the available frames on the right the flame frame palette as we call it uh it shows all the available frames that can be added at a given and at a given place based on python grammar so the given place is always where the blue line is so the symbols on the left as you can see here the i the f are keyboard shortcuts that spawn the frame to the position of the cursor the new frame will be added as i said where the card is so different card places may allow for different flames so for example if i go inside the while loop you can see the break and continue appearing and if i press i for adding a nif inside the if you can see also the alif and the else appearing so in order to keep a consistency with a python but at the same time try to organize uh the you know the coding uh area we have created three sections in the coding area the top one is for the imports the second one is for the function declarations and the third one is the main code as you can see if i move the car from one to the other different frame options appear on the right so here i can declare a functional comment and here i can import things another interesting element of the ui is the editable slot so every frame has at least one area where python textual code can be added by the user and the method call the frame for example which is the function called yep and and are blank so these are blank frames the function calls with only one editable slot that the user has to write python code in it so this way uh actual uh textual python code is used alongside with the visual frames and also modern uh coding aids like autocompletion and auto parenthesis matching and context highlighting are available in stripe let me delete that so in order to further support the keyboard only interaction we have implemented frame selection and manipulation through keyboard commands for example i can select multiple frames with the shift and the arrows and i can as soon as i select i can copy them cut paste with the usual control or command c x and v command so i can copy here and probably paste yep and i can also delete with the backspace or the delete button another recognition over recall feature of stripe that targets to support learning is the micro bit api explorer so we're assuming that you know most of the users that come to strive don't really know by hard all the micro bit api which is quite broad and fast and so the idea is to have a panel here like on the right where you can go and explore things and try to find also things and for example if i want to display a message on the screen even though i've done it already but i can i can i can go on the led display get some information of what this is it's about the 5x5 led display and i can go and see what um methods api methods are there for that so if i want to display or scroll something to the screen i can go and see what that does oops i i can see uh you know a more detailed uh api uh description but not useful for every user i can select it and add it straight to the code and i can i can type anything here i don't know something like hello and so in terms of standard functionality undo and redo as you can see here on the left i are available for the user and also there is a menu on the left that you can load your project save the project and change the name and even translate the ui to different languages we have friends for example here and that works at the moment and through a button click you can convert your code to a python file and you can open it and use it however you like and lastly in terms of um integration with the micro bit microcontroller you can set your code to the micro bit with a simple uh click and so that happens for a chrome and ads for firefox and safari and the others you need to download it first and then set it as as with every online micro bit tool so this system that you see here has gone through a usability evaluation and we are currently also preparing for uh for a study to assess the effectiveness of the tool in helping transition as we said from the block based to the text based paradigm and as i mentioned earlier you can find stripe at stripe.org and at the moment we are also preparing a python only version with an integrated console to test and run your code in the tool which again is towards the idea of going to you know actual python after even this is also actual python and so with this i would like to sum up and thank you for listening i'm happy to take questions suggestions or feedback and feel free to to connect with us me or care drop us an email or ask us questions or tell us about your tool or whatever related to our work you have so thank you so much i think i'm on time what yes yeah well within it so thank you so much uh babis for an amazing presentation as as someone that you know i've spent a lot of time working with young students in block-based coding uh trying to make the transition to python or javascript myself i've always found the transition to be very uh difficult so always great to see you know some solutions some supports for that um just a couple um things to take note and and uh pierre thanks so much i i know you've been helping um answer the questions as they've been coming in um i don't know if you'd like to uh add to this at all um but we did have a suggestion slash question from i believe it's massiereige um and hopefully i'm pronouncing that correctly who asks why don't you take text out of the blocks to build with small modifications of program text in python we use this approach in poland as a smooth move from blocks to text and so i'm not sure because i know pierre was asking for a little more context there so i don't know if you um have any feedback for that or if not maybe we can ask messiest to to just kind of clarify on that and then if not we can move on to uh some other questions what is the question again so i can you can repeat the question because i i can uh listen to all of it so they said that with me so it's so why don't you uh take texts out of the block to build with small modifications of program text in python i'm not really sure what this question actually is asking for so okay so we'll we'll see if they can maybe clarify in the chat and then we also have um meghdad asking what is the format of the exported file and they're asking if it's hex so if you're about to try the one for the microwave yes it's a hex file yeah you download the hex file i think i can show a bit what's happening uh screen one yep can you see my screen probably you can yep you can uh so if i exports into micro bit uh you know i'm prompted with a hex file and i have to download the hex file there's also a small you know kind of guide of what you do you first connect and then you don't transfer the hex file to your micro bit but if it's uh if i'm on chrome i think i can show that on chrome as well on chrome you can directly send it to your micro bit as soon as it's connected to the to the device any other questions clear did you manage to uh to answer the question of this person that i couldn't really understand what they were asking for i i don't think we've gotten any uh clarification uh since i think i mean the way i understand it is probably they meant that you have the blocks on one side and you can drag them to the editor and it will transform to text that's how i interpret it okay if it's that it's it sounds interesting so the thing with with stripe is that uh what you see is actually what the code looks like so we're not uh we're not showing something different than what the code actually is so again i'm gonna share the screen as you can see if you if you go through it that's pure uh python code the only thing that may be a bit different is that how we present the uh the indentation because in python you have indentation but everything else reads like a like a python code and if i if i if i try and open the python code side by side you can see that it's exactly what you see is what you get nothing different so for example other systems like let's say may code they have a few different things from from the blocks to the to the actual uh to the actual code so we have the exact same thing like if it's like reading it line by line you get the exact thing so that's that's why we're uh we think it's closer to uh to the to the actual python side and it also has the the block based you know uh ui features like drag and drop and things like that but it's actually python code wrapped around you know some graphical shells so someone says if it's only an online application yep at the moment it's only an online application and we're also considering of having it you know for download but we just finished our first um version of you know a full working uh and final prototype and we didn't have time to do it at the moment we we may do it in the future